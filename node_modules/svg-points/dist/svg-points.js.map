{"version":3,"file":"svg-points.js","sources":["../src/toPoints.js","../src/toPath.js","../src/valid.js"],"sourcesContent":["const toPoints = ({ type, ...props }) => {\n  switch (type) {\n    case 'circle':\n      return getPointsFromCircle(props)\n    case 'ellipse':\n      return getPointsFromEllipse(props)\n    case 'line':\n      return getPointsFromLine(props)\n    case 'path':\n      return getPointsFromPath(props)\n    case 'polygon':\n      return getPointsFromPolygon(props)\n    case 'polyline':\n      return getPointsFromPolyline(props)\n    case 'rect':\n      return getPointsFromRect(props)\n    case 'g':\n      return getPointsFromG(props)\n    default:\n      throw new Error('Not a valid shape type')\n  }\n}\n\nconst getPointsFromCircle = ({ cx, cy, r }) => {\n  return [\n    { x: cx, y: cy - r, moveTo: true },\n    { x: cx, y: cy + r, curve: { type: 'arc', rx: r, ry: r, sweepFlag: 1 } },\n    { x: cx, y: cy - r, curve: { type: 'arc', rx: r, ry: r, sweepFlag: 1 } }\n  ]\n}\n\nconst getPointsFromEllipse = ({ cx, cy, rx, ry }) => {\n  return [\n    { x: cx, y: cy - ry, moveTo: true },\n    { x: cx, y: cy + ry, curve: { type: 'arc', rx, ry, sweepFlag: 1 } },\n    { x: cx, y: cy - ry, curve: { type: 'arc', rx, ry, sweepFlag: 1 } }\n  ]\n}\n\nconst getPointsFromLine = ({ x1, x2, y1, y2 }) => {\n  return [\n    { x: x1, y: y1, moveTo: true },\n    { x: x2, y: y2 }\n  ]\n}\n\nconst validCommands = /[MmLlHhVvCcSsQqTtAaZz]/g\n\nconst commandLengths = {\n  A: 7,\n  C: 6,\n  H: 1,\n  L: 2,\n  M: 2,\n  Q: 4,\n  S: 4,\n  T: 2,\n  V: 1,\n  Z: 0\n}\n\nconst relativeCommands = [\n  'a',\n  'c',\n  'h',\n  'l',\n  'm',\n  'q',\n  's',\n  't',\n  'v'\n]\n\nconst isRelative = command => relativeCommands.indexOf(command) !== -1\n\nconst optionalArcKeys = [ 'xAxisRotation', 'largeArcFlag', 'sweepFlag' ]\n\nconst getCommands = d => d.match(validCommands)\n\nconst getParams = d => d.split(validCommands)\n  .map(v => v.replace(/[0-9]+-/g, m => `${m.slice(0, -1)} -`))\n  .map(v => v.replace(/\\.[0-9]+/g, m => `${m} `))\n  .map(v => v.trim())\n  .filter(v => v.length > 0)\n  .map(v => v.split(/[ ,]+/)\n    .map(parseFloat)\n    .filter(n => !isNaN(n))\n  )\n\nconst getPointsFromPath = ({ d }) => {\n  const commands = getCommands(d)\n  const params = getParams(d)\n\n  const points = []\n\n  let moveTo\n\n  for (let i = 0, l = commands.length; i < l; i++) {\n    const command = commands[ i ]\n    const upperCaseCommand = command.toUpperCase()\n    const commandLength = commandLengths[ upperCaseCommand ]\n    const relative = isRelative(command)\n\n    if (commandLength > 0) {\n      const commandParams = params.shift()\n      const iterations = commandParams.length / commandLength\n\n      for (let j = 0; j < iterations; j++) {\n        const prevPoint = points[ points.length - 1 ] || { x: 0, y: 0 }\n\n        switch (upperCaseCommand) {\n          case 'M':\n            const x = (relative ? prevPoint.x : 0) + commandParams.shift()\n            const y = (relative ? prevPoint.y : 0) + commandParams.shift()\n\n            if (j === 0) {\n              moveTo = { x, y }\n              points.push({ x, y, moveTo: true })\n            } else {\n              points.push({ x, y })\n            }\n\n            break\n\n          case 'L':\n            points.push({\n              x: (relative ? prevPoint.x : 0) + commandParams.shift(),\n              y: (relative ? prevPoint.y : 0) + commandParams.shift()\n            })\n\n            break\n\n          case 'H':\n            points.push({\n              x: (relative ? prevPoint.x : 0) + commandParams.shift(),\n              y: prevPoint.y\n            })\n\n            break\n\n          case 'V':\n            points.push({\n              x: prevPoint.x,\n              y: (relative ? prevPoint.y : 0) + commandParams.shift()\n            })\n\n            break\n\n          case 'A':\n            points.push({\n              curve: {\n                type: 'arc',\n                rx: commandParams.shift(),\n                ry: commandParams.shift(),\n                xAxisRotation: commandParams.shift(),\n                largeArcFlag: commandParams.shift(),\n                sweepFlag: commandParams.shift()\n              },\n              x: (relative ? prevPoint.x : 0) + commandParams.shift(),\n              y: (relative ? prevPoint.y : 0) + commandParams.shift()\n            })\n\n            for (let k of optionalArcKeys) {\n              if (points[ points.length - 1 ][ 'curve' ][ k ] === 0) {\n                delete points[ points.length - 1 ][ 'curve' ][ k ]\n              }\n            }\n\n            break\n\n          case 'C':\n            points.push({\n              curve: {\n                type: 'cubic',\n                x1: (relative ? prevPoint.x : 0) + commandParams.shift(),\n                y1: (relative ? prevPoint.y : 0) + commandParams.shift(),\n                x2: (relative ? prevPoint.x : 0) + commandParams.shift(),\n                y2: (relative ? prevPoint.y : 0) + commandParams.shift()\n              },\n              x: (relative ? prevPoint.x : 0) + commandParams.shift(),\n              y: (relative ? prevPoint.y : 0) + commandParams.shift()\n            })\n\n            break\n\n          case 'S':\n            const sx2 = (relative ? prevPoint.x : 0) + commandParams.shift()\n            const sy2 = (relative ? prevPoint.y : 0) + commandParams.shift()\n            const sx = (relative ? prevPoint.x : 0) + commandParams.shift()\n            const sy = (relative ? prevPoint.y : 0) + commandParams.shift()\n\n            const diff = {}\n\n            let sx1\n            let sy1\n\n            if (prevPoint.curve && prevPoint.curve.type === 'cubic') {\n              diff.x = Math.abs(prevPoint.x - prevPoint.curve.x2)\n              diff.y = Math.abs(prevPoint.y - prevPoint.curve.y2)\n              sx1 = prevPoint.x < prevPoint.curve.x2 ? prevPoint.x - diff.x : prevPoint.x + diff.x\n              sy1 = prevPoint.y < prevPoint.curve.y2 ? prevPoint.y - diff.y : prevPoint.y + diff.y\n            } else {\n              diff.x = Math.abs(sx - sx2)\n              diff.y = Math.abs(sy - sy2)\n              sx1 = prevPoint.x\n              sy1 = prevPoint.y\n            }\n\n            points.push({ curve: { type: 'cubic', x1: sx1, y1: sy1, x2: sx2, y2: sy2 }, x: sx, y: sy })\n\n            break\n\n          case 'Q':\n            points.push({\n              curve: {\n                type: 'quadratic',\n                x1: (relative ? prevPoint.x : 0) + commandParams.shift(),\n                y1: (relative ? prevPoint.y : 0) + commandParams.shift()\n              },\n              x: (relative ? prevPoint.x : 0) + commandParams.shift(),\n              y: (relative ? prevPoint.y : 0) + commandParams.shift()\n            })\n\n            break\n\n          case 'T':\n            const tx = (relative ? prevPoint.x : 0) + commandParams.shift()\n            const ty = (relative ? prevPoint.y : 0) + commandParams.shift()\n\n            let tx1\n            let ty1\n\n            if (prevPoint.curve && prevPoint.curve.type === 'quadratic') {\n              const diff = {\n                x: Math.abs(prevPoint.x - prevPoint.curve.x1),\n                y: Math.abs(prevPoint.y - prevPoint.curve.y1)\n              }\n\n              tx1 = prevPoint.x < prevPoint.curve.x1 ? prevPoint.x - diff.x : prevPoint.x + diff.x\n              ty1 = prevPoint.y < prevPoint.curve.y1 ? prevPoint.y - diff.y : prevPoint.y + diff.y\n            } else {\n              tx1 = prevPoint.x\n              ty1 = prevPoint.y\n            }\n\n            points.push({ curve: { type: 'quadratic', x1: tx1, y1: ty1 }, x: tx, y: ty })\n\n            break\n        }\n      }\n    } else {\n      const prevPoint = points[ points.length - 1 ] || { x: 0, y: 0 }\n\n      if (prevPoint.x !== moveTo.x || prevPoint.y !== moveTo.y) {\n        points.push({ x: moveTo.x, y: moveTo.y })\n      }\n    }\n  }\n\n  return points\n}\n\nconst getPointsFromPolygon = ({ points }) => {\n  return getPointsFromPoints({ closed: true, points })\n}\n\nconst getPointsFromPolyline = ({ points }) => {\n  return getPointsFromPoints({ closed: false, points })\n}\n\nconst getPointsFromPoints = ({ closed, points }) => {\n  const numbers = points.split(/[\\s,]+/).map(n => parseFloat(n))\n\n  const p = numbers.reduce((arr, point, i) => {\n    if (i % 2 === 0) {\n      arr.push({ x: point })\n    } else {\n      arr[ (i - 1) / 2 ].y = point\n    }\n\n    return arr\n  }, [])\n\n  if (closed) {\n    p.push({ ...p[ 0 ] })\n  }\n\n  p[ 0 ].moveTo = true\n\n  return p\n}\n\nconst getPointsFromRect = ({ height, rx, ry, width, x, y }) => {\n  if (rx || ry) {\n    return getPointsFromRectWithCornerRadius({\n      height,\n      rx: rx || ry,\n      ry: ry || rx,\n      width,\n      x,\n      y\n    })\n  }\n\n  return getPointsFromBasicRect({ height, width, x, y })\n}\n\nconst getPointsFromBasicRect = ({ height, width, x, y }) => {\n  return [\n    { x, y, moveTo: true },\n    { x: x + width, y },\n    { x: x + width, y: y + height },\n    { x, y: y + height },\n    { x, y }\n  ]\n}\n\nconst getPointsFromRectWithCornerRadius = ({ height, rx, ry, width, x, y }) => {\n  const curve = { type: 'arc', rx, ry, sweepFlag: 1 }\n\n  return [\n    { x: x + rx, y, moveTo: true },\n    { x: x + width - rx, y },\n    { x: x + width, y: y + ry, curve },\n    { x: x + width, y: y + height - ry },\n    { x: x + width - rx, y: y + height, curve },\n    { x: x + rx, y: y + height },\n    { x, y: y + height - ry, curve },\n    { x, y: y + ry },\n    { x: x + rx, y, curve }\n  ]\n}\n\nconst getPointsFromG = ({ shapes }) => shapes.map(s => toPoints(s))\n\nexport default toPoints\n","import toPoints from './toPoints'\n\nconst pointsToD = p => {\n  let d = ''\n  let i = 0\n  let firstPoint\n\n  for (let point of p) {\n    const { curve = false, moveTo, x, y } = point\n    const isFirstPoint = i === 0 || moveTo\n    const isLastPoint = i === p.length - 1 || p[ i + 1 ].moveTo\n    const prevPoint = i === 0 ? null : p[ i - 1 ]\n\n    if (isFirstPoint) {\n      firstPoint = point\n\n      if (!isLastPoint) {\n        d += `M${x},${y}`\n      }\n    } else if (curve) {\n      switch (curve.type) {\n        case 'arc':\n          const { largeArcFlag = 0, rx, ry, sweepFlag = 0, xAxisRotation = 0 } = point.curve\n          d += `A${rx},${ry},${xAxisRotation},${largeArcFlag},${sweepFlag},${x},${y}`\n          break\n        case 'cubic':\n          const { x1: cx1, y1: cy1, x2: cx2, y2: cy2 } = point.curve\n          d += `C${cx1},${cy1},${cx2},${cy2},${x},${y}`\n          break\n        case 'quadratic':\n          const { x1: qx1, y1: qy1 } = point.curve\n          d += `Q${qx1},${qy1},${x},${y}`\n          break\n      }\n\n      if (isLastPoint && x === firstPoint.x && y === firstPoint.y) {\n        d += 'Z'\n      }\n    } else if (isLastPoint && x === firstPoint.x && y === firstPoint.y) {\n      d += 'Z'\n    } else if (x !== prevPoint.x && y !== prevPoint.y) {\n      d += `L${x},${y}`\n    } else if (x !== prevPoint.x) {\n      d += `H${x}`\n    } else if (y !== prevPoint.y) {\n      d += `V${y}`\n    }\n\n    i++\n  }\n\n  return d\n}\n\nconst toPath = s => {\n  const isPoints = Array.isArray(s)\n  const isGroup = isPoints ? (Array.isArray(s[ 0 ])) : (s.type === 'g')\n  const points = isPoints ? s : (isGroup ? s.shapes.map(shp => toPoints(shp)) : toPoints(s))\n\n  if (isGroup) {\n    return points.map(p => pointsToD(p))\n  }\n\n  return pointsToD(points)\n}\n\nexport default toPath\n","const getErrors = shape => {\n  const rules = getRules(shape)\n  const errors = []\n\n  rules.map(({ match, prop, required, type }) => {\n    if (typeof shape[ prop ] === 'undefined') {\n      if (required) {\n        errors.push(\n          `${prop} prop is required${prop === 'type' ? '' : ` on a ${shape.type}`}`\n        )\n      }\n    } else {\n      if (typeof type !== 'undefined') {\n        if (type === 'array') {\n          if (!Array.isArray(shape[ prop ])) {\n            errors.push(`${prop} prop must be of type array`)\n          }\n        } else if (typeof shape[ prop ] !== type) { // eslint-disable-line valid-typeof\n          errors.push(`${prop} prop must be of type ${type}`)\n        }\n      }\n\n      if (Array.isArray(match)) {\n        if (match.indexOf(shape[ prop ]) === -1) {\n          errors.push(`${prop} prop must be one of ${match.join(', ')}`)\n        }\n      }\n    }\n  })\n\n  if (shape.type === 'g' && Array.isArray(shape.shapes)) {\n    const childErrors = shape.shapes.map(s => getErrors(s))\n    return [].concat.apply(errors, childErrors)\n  }\n\n  return errors\n}\n\nconst getRules = shape => {\n  const rules = [{\n    match: [\n      'circle',\n      'ellipse',\n      'line',\n      'path',\n      'polygon',\n      'polyline',\n      'rect',\n      'g'\n    ],\n    prop: 'type',\n    required: true,\n    type: 'string'\n  }]\n\n  switch (shape.type) {\n    case 'circle':\n      rules.push({ prop: 'cx', required: true, type: 'number' })\n      rules.push({ prop: 'cy', required: true, type: 'number' })\n      rules.push({ prop: 'r', required: true, type: 'number' })\n      break\n\n    case 'ellipse':\n      rules.push({ prop: 'cx', required: true, type: 'number' })\n      rules.push({ prop: 'cy', required: true, type: 'number' })\n      rules.push({ prop: 'rx', required: true, type: 'number' })\n      rules.push({ prop: 'ry', required: true, type: 'number' })\n      break\n\n    case 'line':\n      rules.push({ prop: 'x1', required: true, type: 'number' })\n      rules.push({ prop: 'x2', required: true, type: 'number' })\n      rules.push({ prop: 'y1', required: true, type: 'number' })\n      rules.push({ prop: 'y2', required: true, type: 'number' })\n      break\n\n    case 'path':\n      rules.push({ prop: 'd', required: true, type: 'string' })\n      break\n\n    case 'polygon':\n    case 'polyline':\n      rules.push({ prop: 'points', required: true, type: 'string' })\n      break\n\n    case 'rect':\n      rules.push({ prop: 'height', required: true, type: 'number' })\n      rules.push({ prop: 'rx', type: 'number' })\n      rules.push({ prop: 'ry', type: 'number' })\n      rules.push({ prop: 'width', required: true, type: 'number' })\n      rules.push({ prop: 'x', required: true, type: 'number' })\n      rules.push({ prop: 'y', required: true, type: 'number' })\n      break\n\n    case 'g':\n      rules.push({ prop: 'shapes', required: true, type: 'array' })\n      break\n  }\n\n  return rules\n}\n\nconst valid = shape => {\n  const errors = getErrors(shape)\n\n  return {\n    errors,\n    valid: errors.length === 0\n  }\n}\n\nexport default valid\n"],"names":["toPoints","type","props","getPointsFromCircle","getPointsFromEllipse","getPointsFromLine","getPointsFromPath","getPointsFromPolygon","getPointsFromPolyline","getPointsFromRect","getPointsFromG","Error","cx","cy","r","x","y","moveTo","curve","rx","ry","sweepFlag","x1","x2","y1","y2","validCommands","commandLengths","relativeCommands","isRelative","indexOf","command","optionalArcKeys","getCommands","d","match","getParams","split","map","v","replace","m","slice","trim","filter","length","parseFloat","isNaN","n","commands","params","points","i","l","upperCaseCommand","toUpperCase","commandLength","relative","commandParams","shift","iterations","j","prevPoint","push","k","sx2","sy2","sx","sy","diff","sx1","sy1","Math","abs","tx","ty","tx1","ty1","getPointsFromPoints","closed","numbers","p","reduce","arr","point","height","width","getPointsFromRectWithCornerRadius","getPointsFromBasicRect","shapes","s","pointsToD","firstPoint","isFirstPoint","isLastPoint","largeArcFlag","xAxisRotation","cx1","cy1","cx2","cy2","qx1","qy1","toPath","isPoints","Array","isArray","isGroup","shp","getErrors","rules","getRules","shape","errors","prop","required","babelHelpers.typeof","join","childErrors","concat","apply","valid"],"mappings":"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"}