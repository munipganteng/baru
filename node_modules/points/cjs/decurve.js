"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _helpers = require("./helpers");

var _cubify = _interopRequireDefault(require("./cubify"));

var _add = require("./add");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var angle = function angle(triangle) {
  var _triangle$ = _slicedToArray(triangle[0], 2),
      ax = _triangle$[0],
      ay = _triangle$[1];

  var _triangle$2 = _slicedToArray(triangle[1], 2),
      bx = _triangle$2[0],
      by = _triangle$2[1];

  var _triangle$3 = _slicedToArray(triangle[2], 2),
      cx = _triangle$3[0],
      cy = _triangle$3[1];

  var a = (0, _helpers.linearLength)(ax, ay, bx, by);
  var b = (0, _helpers.linearLength)(bx, by, cx, cy);
  var c = (0, _helpers.linearLength)(cx, cy, ax, ay);
  return (0, _helpers.angleFromSides)(a, b, c);
};

var curved = function curved(shape) {
  return shape.reduce(function (c, _ref) {
    var curve = _ref.curve;
    return curve ? true : c;
  }, false);
};

var decurve = function decurve(shape) {
  var accuracy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

  if (!curved(shape)) {
    return shape;
  }

  var s = (0, _cubify["default"])(shape);
  var d = [];
  s.map(function (point, i) {
    if (point.curve) {
      var prevPoint = s[i - 1];

      if (prevPoint.x !== point.x || prevPoint.y !== point.y) {
        straighten(prevPoint, point, accuracy).map(function (p) {
          return d.push(p);
        });
      }
    } else {
      d.push(point);
    }
  });
  return d;
};

var straight = function straight(x1, y1, cx1, cy1, x2, y2, cx2, cy2, accuracy) {
  var t1 = [[cx1, cy1], [x2, y2], [x1, y1]];
  var t2 = [[cx2, cy2], [x1, y1], [x2, y2]];
  return angle(t1) < accuracy && angle(t2) < accuracy;
};

var straighten = function straighten(prevPoint, point, accuracy) {
  var x1 = prevPoint.x,
      y1 = prevPoint.y;
  var x2 = point.x,
      y2 = point.y,
      curve = point.curve;
  var cx1 = curve.x1,
      cy1 = curve.y1,
      cx2 = curve.x2,
      cy2 = curve.y2;

  if (straight(x1, y1, cx1, cy1, x2, y2, cx2, cy2, accuracy)) {
    return [point];
  }

  var _curvedPoints = (0, _add.curvedPoints)(prevPoint, point),
      _curvedPoints2 = _slicedToArray(_curvedPoints, 2),
      midPoint = _curvedPoints2[0],
      lastPoint = _curvedPoints2[1];

  return [].concat(_toConsumableArray(straighten(prevPoint, midPoint, accuracy)), _toConsumableArray(straighten(midPoint, lastPoint, accuracy)));
};

var _default = decurve;
exports["default"] = _default;