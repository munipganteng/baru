"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _helpers = require("./helpers");

var _boundingBox2 = _interopRequireDefault(require("./boundingBox"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { if (i % 2) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } else { Object.defineProperties(target, Object.getOwnPropertyDescriptors(arguments[i])); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var rotatePoint = function rotatePoint(x, y, c, s, about) {
  var offsetX = about.x,
      offsetY = about.y;
  var relativeX = x - offsetX;
  var relativeY = y - offsetY;
  return [relativeX * c - relativeY * s + offsetX, relativeX * s + relativeY * c + offsetY];
};

var rotatePoints = function rotatePoints(shape, angle, about) {
  return shape.map(function (point) {
    var r = angle * Math.PI / 180;
    var c = Math.cos(r);
    var s = Math.sin(r);

    var _rotatePoint = rotatePoint(point.x, point.y, c, s, about),
        _rotatePoint2 = _slicedToArray(_rotatePoint, 2),
        x = _rotatePoint2[0],
        y = _rotatePoint2[1];

    var p = _objectSpread({}, point, {
      x: x,
      y: y
    });

    if (p.curve) {
      if (p.curve.type === 'quadratic' || p.curve.type === 'cubic') {
        var _rotatePoint3 = rotatePoint(p.curve.x1, p.curve.y1, c, s, about),
            _rotatePoint4 = _slicedToArray(_rotatePoint3, 2),
            x1 = _rotatePoint4[0],
            y1 = _rotatePoint4[1];

        p.curve = _objectSpread({}, p.curve, {
          x1: x1,
          y1: y1
        });
      }

      if (p.curve.type === 'cubic') {
        var _rotatePoint5 = rotatePoint(p.curve.x2, p.curve.y2, c, s, about),
            _rotatePoint6 = _slicedToArray(_rotatePoint5, 2),
            x2 = _rotatePoint6[0],
            y2 = _rotatePoint6[1];

        p.curve = _objectSpread({}, p.curve, {
          x2: x2,
          y2: y2
        });
      }
    }

    return p;
  });
};

var rotate = function rotate(s, angle) {
  var _boundingBox = (0, _boundingBox2["default"])(s),
      about = _boundingBox.center;

  return (0, _helpers.applyFuncToShapes)(rotatePoints, s, angle, about);
};

var _default = rotate;
exports["default"] = _default;