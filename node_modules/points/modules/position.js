import decurve from './decurve';
import length from './length';
import { angleFromSides, numberAtInterval, linearLength } from './helpers';

var angle = function angle(x1, y1, x2, y2, a) {
  if (x1 === x2) {
    return y1 >= y2 ? 0 : 180;
  }

  var b = 100;
  var c = linearLength(x2, y2, x1, y1 - b);
  var ang = angleFromSides(a, b, c);
  return x1 < x2 ? ang : 360 - ang;
};

var over = function over(shape, length, totalLength, desiredLength) {
  var _shape = shape[length - 2],
      x1 = _shape.x,
      y1 = _shape.y;
  var _shape2 = shape[length - 1],
      x2 = _shape2.x,
      y2 = _shape2.y;
  var segmentLength = linearLength(x1, y1, x2, y2);
  var segmentInterval = (desiredLength - totalLength) / segmentLength + 1;
  return {
    x1: x1,
    y1: y1,
    x2: x2,
    y2: y2,
    segmentInterval: segmentInterval,
    segmentLength: segmentLength
  };
};

var position = function position(shape, interval, accuracy) {
  var s = decurve(shape, accuracy);
  var l = s.length;
  var t = length(s);
  var d = t * interval;

  var _ref = interval > 1 ? over(s, l, t, d) : interval < 0 ? under(s, d) : within(s, l, d),
      x1 = _ref.x1,
      y1 = _ref.y1,
      x2 = _ref.x2,
      y2 = _ref.y2,
      segmentInterval = _ref.segmentInterval,
      segmentLength = _ref.segmentLength;

  return {
    angle: angle(x1, y1, x2, y2, segmentLength),
    x: numberAtInterval(x1, x2, segmentInterval),
    y: numberAtInterval(y1, y2, segmentInterval)
  };
};

var under = function under(shape, desiredLength) {
  var _shape$ = shape[0],
      x1 = _shape$.x,
      y1 = _shape$.y;
  var _shape$2 = shape[1],
      x2 = _shape$2.x,
      y2 = _shape$2.y;
  var segmentLength = linearLength(x1, y1, x2, y2);
  var segmentInterval = desiredLength / segmentLength;
  return {
    x1: x1,
    y1: y1,
    x2: x2,
    y2: y2,
    segmentInterval: segmentInterval,
    segmentLength: segmentLength
  };
};

var within = function within(shape, length, desiredLength) {
  var currentLength = 0;

  for (var i = 0; i < length; i++) {
    var moveTo = shape[i].moveTo;

    if (!moveTo) {
      var _shape3 = shape[i - 1],
          x1 = _shape3.x,
          y1 = _shape3.y;
      var _shape$i = shape[i],
          x2 = _shape$i.x,
          y2 = _shape$i.y;
      var segmentLength = linearLength(x1, y1, x2, y2);

      if (currentLength + segmentLength >= desiredLength) {
        var segmentInterval = (desiredLength - currentLength) / segmentLength;
        return {
          x1: x1,
          y1: y1,
          x2: x2,
          y2: y2,
          segmentInterval: segmentInterval,
          segmentLength: segmentLength
        };
      }

      currentLength += segmentLength;
    }
  }
};

export default position;